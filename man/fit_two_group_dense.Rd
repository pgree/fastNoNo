% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_two_group_dense.R
\name{fit_two_group_dense}
\alias{fit_two_group_dense}
\title{Fast two-group normal-normal model}
\usage{
fit_two_group_dense(y, X1, X2)
}
\arguments{
\item{y}{Outcome vector.}

\item{X1}{Data matrix corresponding to group 1.}

\item{X2}{Data matrix corresponding to group 2.}
}
\value{
A named list with the following components:
\itemize{
\item \code{beta_1}: A data frame of posterior means and standard deviations for
the vector \eqn{\beta_1}, the coefficients on \code{X1}.
\item \code{beta_2}: A data frame of posterior means and standard deviations for
the vector \eqn{\beta_2}, the coefficients on \code{X2}.
\item \code{sigma}: A data frame with posterior means and standard deviations for
\eqn{\sigma_y}, \eqn{\sigma_1}, and \eqn{\sigma_2}.
\item \code{error}: A scalar. The approximate accuracy of the posterior mean and
standard deviation estimates.
}
}
\description{
This function fits a fast approximation to the
Bayesian two-group hierarchical linear regression model

\deqn{y ~ normal(X_1 \beta_1 + X_2 \beta_2, \sigma_y)}
\deqn{\beta_1 ~ normal(0, \sigma_1)}
\deqn{\beta_2 ~ normal(0, \sigma_2)}
\deqn{\sigma_1 ~ normal+(0, 1)}
\deqn{\sigma_2 ~ normal+(0, 1)}
\deqn{\sigma_y ~ normal+(0, 1)}

using numerical linear algebra and low dimensional Gaussian quadrature.

\strong{NOTE:} Currently the algorithm is implemented in Fortran and must be
compiled the first time the function is called in an R session. Subsequent
calls to the function in the same R session do not require recompilation.
In future versions of the package the Fortran code will come pre-compiled.
}
\examples{
\dontrun{
# Simulate data
n <- 10000
k_1 <- 50
k_2 <- 60

sigma_y <- 1
sigma_1 <- 0.5
sigma_2 <- 2
beta_1 <- rnorm(k_1, 0, sigma_1)
beta_2 <- rnorm(k_2, 0, sigma_2)

X_1 <- matrix(rnorm(n * k_1, 2, 3), ncol = k_1)
X_2 <- matrix(rnorm(n * k_2, -1, 5), ncol = k_2)
y <- rnorm(n, X_1 \%*\% beta_1 + X_2 \%*\% beta_2, sigma_y)

# Fit model
fit <- fit_two_group_dense(y, X_1, X_2)
str(fit)

# Plot estimates vs truth
plot(fit$beta_1$mean, beta_1)
plot(fit$beta_2$mean, beta_2)
plot(fit$sigma$mean, c(sigma_y, sigma_1, sigma_2))
}

}
